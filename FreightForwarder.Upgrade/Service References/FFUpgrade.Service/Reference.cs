//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18063
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace FreightForwarder.Upgrade.FFUpgrade.Service {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpgradePackage", Namespace="http://schemas.datacontract.org/2004/07/FreightForwarder.Domain.Entities")]
    [System.SerializableAttribute()]
    public partial class UpgradePackage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] FileBytesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PostTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] FileBytes {
            get {
                return this.FileBytesField;
            }
            set {
                if ((object.ReferenceEquals(this.FileBytesField, value) != true)) {
                    this.FileBytesField = value;
                    this.RaisePropertyChanged("FileBytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileVersion {
            get {
                return this.FileVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.FileVersionField, value) != true)) {
                    this.FileVersionField = value;
                    this.RaisePropertyChanged("FileVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PostTime {
            get {
                return this.PostTimeField;
            }
            set {
                if ((this.PostTimeField.Equals(value) != true)) {
                    this.PostTimeField = value;
                    this.RaisePropertyChanged("PostTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FFUpgrade.Service.IUpdateService")]
    public interface IUpdateService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdateService/CheckUpdate", ReplyAction="http://tempuri.org/IUpdateService/CheckUpdateResponse")]
        string[] CheckUpdate(string version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdateService/CheckUpdate", ReplyAction="http://tempuri.org/IUpdateService/CheckUpdateResponse")]
        System.Threading.Tasks.Task<string[]> CheckUpdateAsync(string version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdateService/GetUpdate", ReplyAction="http://tempuri.org/IUpdateService/GetUpdateResponse")]
        FreightForwarder.Upgrade.FFUpgrade.Service.UpgradePackage GetUpdate(string version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdateService/GetUpdate", ReplyAction="http://tempuri.org/IUpdateService/GetUpdateResponse")]
        System.Threading.Tasks.Task<FreightForwarder.Upgrade.FFUpgrade.Service.UpgradePackage> GetUpdateAsync(string version);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUpdateServiceChannel : FreightForwarder.Upgrade.FFUpgrade.Service.IUpdateService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateServiceClient : System.ServiceModel.ClientBase<FreightForwarder.Upgrade.FFUpgrade.Service.IUpdateService>, FreightForwarder.Upgrade.FFUpgrade.Service.IUpdateService {
        
        public UpdateServiceClient() {
        }
        
        public UpdateServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UpdateServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UpdateServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UpdateServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] CheckUpdate(string version) {
            return base.Channel.CheckUpdate(version);
        }
        
        public System.Threading.Tasks.Task<string[]> CheckUpdateAsync(string version) {
            return base.Channel.CheckUpdateAsync(version);
        }
        
        public FreightForwarder.Upgrade.FFUpgrade.Service.UpgradePackage GetUpdate(string version) {
            return base.Channel.GetUpdate(version);
        }
        
        public System.Threading.Tasks.Task<FreightForwarder.Upgrade.FFUpgrade.Service.UpgradePackage> GetUpdateAsync(string version) {
            return base.Channel.GetUpdateAsync(version);
        }
    }
}
